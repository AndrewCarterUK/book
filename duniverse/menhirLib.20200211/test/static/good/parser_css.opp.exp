File "parser_css.mly", line 44, characters 22-29:
Warning: the token CHARSET is unused.
File "parser_css.mly", line 44, characters 48-56:
Warning: the token FONTFACE is unused.
File "parser_css.mly", line 44, characters 30-36:
Warning: the token IMPORT is unused.
File "parser_css.mly", line 44, characters 37-42:
Warning: the token MEDIA is unused.
File "parser_css.mly", line 50, characters 45-50:
Warning: the token MINUS is unused.
File "parser_css.mly", line 47, characters 22-32:
Warning: the token OPEN_ROUND is unused.
File "parser_css.mly", line 44, characters 43-47:
Warning: the token PAGE is unused.
File "parser_css.mly", line 50, characters 31-39:
Warning: the token QUOTIENT is unused.
File "parser_css.mly", line 35, characters 22-30:
Warning: the token TComment is unused.
File "parser_css.mly", line 69, characters 22-30:
Warning: the token TUnknown is unused.
%{
open Ast_css

(*************************************************************************)
(* Prelude *)
(*************************************************************************)

(*
 * spec: http://www.w3.org/TR/CSS2/grammar.html
 * The official grammar contains a space token ... hmmm
 * old spec: http://www.w3.org/TR/REC-CSS1/#appendix-b
 * see also: http://www.w3.org/TR/CSS2/syndata.html
 *
 * Most of the code in this file is copy pasted from Dario Teixera
 * css parser and preprocessor: http://forge.ocamlcore.org/projects/ccss/
 * I've mostly convereted it from menhir to ocamlyacc.
 *)
%}
%start stylesheet
%token <Ast_css.info> ASTERISK
%token <Ast_css.info> ATTR_DASHMATCH
%token <Ast_css.info> ATTR_EQUALS
%token <Ast_css.info> ATTR_INCLUDES
%token <Ast_css.info> ATTR_PREFIX
%token <Ast_css.info> ATTR_SUBSTRING
%token <Ast_css.info> ATTR_SUFFIX
%token <Ast_css.info> CHARSET
%token <Ast_css.info> CLOSE_CURLY
%token <Ast_css.info> CLOSE_ROUND
%token <Ast_css.info> CLOSE_SQUARE
%token <Ast_css.info> COLON
%token <Ast_css.info> COMMA
%token <Ast_css.info> DOUBLE_COLON
%token <Ast_css.info> EOF
%token <Ast_css.info> FONTFACE
%token <Ast_css.info> GT
%token <string * Ast_css.info> HASH
%token <string * Ast_css.info> IDENT
%token <Ast_css.info> IMPORT
%token <Ast_css.info> IMPORTANT
%token <Ast_css.info> MEDIA
%token <Ast_css.info> MINUS
%token <string * Ast_css.info> NTH
%token <Ast_css.info> OPEN_CURLY
%token <Ast_css.info> OPEN_ROUND
%token <Ast_css.info> OPEN_SQUARE
%token <Ast_css.info> PAGE
%token <Ast_css.info> PERIOD
%token <Ast_css.info> PLUS
%token <string * Ast_css.info> QUANTITY
%token <Ast_css.info> QUOTIENT
%token <Ast_css.info> S
%token <string * Ast_css.info> SEL_FUNC
%token <Ast_css.info> SEMICOLON
%token <Ast_css.info> SLASH
%token <Ast_css.info> TComment
%token <string * Ast_css.info> TERM_FUNC
%token <Ast_css.info> TILDE
%token <string * Ast_css.info> TString
%token <Ast_css.info> TUnknown
%token <Ast_css.info> URI
%token <string * Ast_css.info> VAR
%left MINUS PLUS
%left ASTERISK QUOTIENT
%type <Ast_css.stylesheet> stylesheet
%%

stylesheet:
  _1 = s_star _2 = statement_star _3 = EOF
    {                              ( _2 )}

statement:
  _1 = rule
    {        ( _1 (* `Rule *) )}

rule:
  _1 = selector_list _2 = declaration_block
    {                                                                 ((_1, _2))}

selector_list:
  _1 = selector_separated_nonempty_list_COMMA
    {                                                                 (_1)}

selector:
  _1 = simple_selector _2 = combination_star
    {                                                                ((_1, _2))}

combination:
  _1 = combinator _2 = simple_selector
    {                                                                 ((_1, _2))}

combinator:
  _1 = S
    {           ( Descendant )}
| _1 = TILDE
    {           ( GeneralSibling )}
| _1 = PLUS
    {           ( AdjacentSibling )}
| _1 = GT
    {           ( Child )}

simple_selector:
  _1 = element _2 = qualifier_star
    {     ( Explicit (_1, _2) )}
| _1 = qualifier_plus
    {     ( let hd, tl =
       match _1 with
       | hd::tl -> hd, tl
       | _ -> failwith "Generic"
       in
       Generic (hd, tl)
   )}

element:
  _1 = IDENT
    {            ( Tag (fst _1) )}
| _1 = ASTERISK
    {            ( Universal )}

qualifier:
  _1 = HASH
    {     ( Id (fst _1) )}
| _1 = PERIOD _2 = IDENT
    {     ( Class (fst _2) )}
| _1 = OPEN_SQUARE _2 = IDENT _3 = attr_operation _4 = CLOSE_SQUARE
    {     ( Attr (fst _2, _3) )}
| _1 = COLON _2 = IDENT
    {     ( PseudoClass (fst _2) )}
| _1 = DOUBLE_COLON _2 = IDENT
    {     ( PseudoElement (fst _2) )}
| _1 = SEL_FUNC _2 = function_args _3 = CLOSE_ROUND
    {     ( SelFunc (fst _1, _2) )}

function_args:
  _1 = qualifier_plus
    {                  ( Qualified _1 )}
| _1 = NTH
    {                  ( Nth (fst _1) )}
| _1 = IDENT
    {                  ( Nth (fst _1) )}

attr_operation:
  
    {                                ( AttrExists )}
| _1 = ATTR_EQUALS _2 = attr_operand
    {                                ( AttrEquals _2 )}
| _1 = ATTR_INCLUDES _2 = attr_operand
    {                                ( AttrIncludes _2 )}
| _1 = ATTR_DASHMATCH _2 = attr_operand
    {                                ( AttrDashmatch _2 )}
| _1 = ATTR_PREFIX _2 = attr_operand
    {                                ( AttrPrefix _2 )}
| _1 = ATTR_SUFFIX _2 = attr_operand
    {                                ( AttrSuffix _2 )}
| _1 = ATTR_SUBSTRING _2 = attr_operand
    {                                ( AttrSubstring _2 )}

attr_operand:
  _1 = IDENT
    {           ( fst _1 )}
| _1 = TString
    {           ( fst _1 )}

declaration_block:
  _1 = OPEN_CURLY _2 = declaration_plus _3 = CLOSE_CURLY
    {                                                 ( _2 )}

declaration:
  _1 = IDENT _2 = COLON _3 = expr _4 = boption_IMPORTANT _5 = SEMICOLON
    {                                                 ( (fst _1, _3, _4) )}

expr:
  _1 = sentence_separated_nonempty_list_COMMA
    {                                              ( _1 )}

sentence:
  _1 = term_separated_nonempty_list_sopt
    {                                              ( _1 )}

term:
  _1 = calc
    {           ( Calc _1 )}
| _1 = TString
    {           ( String (fst _1) )}
| _1 = IDENT
    {           ( Ident (fst _1) )}
| _1 = URI _2 = TString _3 = CLOSE_ROUND
    {                           ( Uri (fst _2) )}
| _1 = HASH
    {           ( Hash (fst _1) )}
| _1 = TERM_FUNC _2 = expr _3 = CLOSE_ROUND
    {                              ( TermFunc (fst _1, _2) )}
| _1 = SLASH
    {           ( Slash )}

calc:
  _1 = VAR
    {            ( Varref (fst (_1)) )}
| _1 = QUANTITY
    {            ( Quantity (0., Some (fst _1)) (* TODO parse_quantity *) )}

selector_separated_nonempty_list_COMMA:
  _1 = selector
    {            ( [_1] )}
| _1 = selector_separated_nonempty_list_COMMA _2 = COMMA _3 = selector
    {                                                         ( _1 @ [_3] )}

sentence_separated_nonempty_list_COMMA:
  _1 = sentence
    {            ( [_1] )}
| _1 = sentence_separated_nonempty_list_COMMA _2 = COMMA _3 = sentence
    {                                                         ( _1 @ [_3] )}

term_separated_nonempty_list_sopt:
  _1 = term
    {        ( [_1] )}
| _1 = term_separated_nonempty_list_sopt _2 = S _3 = term
    {                                            ( _1 @ [_3] )}

statement_star:
  _1 = statement_star _2 = statement
    {                            ( _1 @ [_2] )}
| 
    {                 ( [] )}

combination_star:
  _1 = combination_star _2 = combination
    {                                ( _1 @ [_2] )}
| 
    {                 ( [] )}

qualifier_star:
  _1 = qualifier_star _2 = qualifier
    {                            ( _1 @ [_2] )}
| 
    {                 ( [] )}

s_star:
  _1 = s_star _2 = S
    {            ( [] )}
| 
    {                 ( [] )}

qualifier_plus:
  _1 = qualifier
    {             ( [_1] )}
| _1 = qualifier_plus _2 = qualifier
    {                            ( _1 @ [_2] )}

declaration_plus:
  _1 = declaration
    {               ( [_1] )}
| _1 = declaration_plus _2 = declaration
    {                                ( _1 @ [_2] )}

boption_IMPORTANT:
  
    {                 ( false )}
| _1 = IMPORTANT
    {             ( true )}

%%


