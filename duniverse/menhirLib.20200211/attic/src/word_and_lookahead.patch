diff --git a/src/LRijkstra.ml b/src/LRijkstra.ml
index 808d3ff..968df13 100644
--- a/src/LRijkstra.ml
+++ b/src/LRijkstra.ml
@@ -288,20 +288,20 @@ end
    [Trie.source fact.position], by consuming [fact.word], under the assumption
    that the next input symbol is [fact.lookahead]. *)
 
-(* The first symbol of the input, [first fact.word fact.lookahead], plays a
-   special role. Indeed, for every position, for every first symbol, and for
-   every lookahead symbol, we keep track of at most one fact. Thus, the total
-   number of facts accumulated by the algorithm is at most [T.n^2], where [T]
-   is the total size of the tries that we have constructed, and [n] is the
-   number of terminal symbols. (This number can be quite large. [T] can be in
-   the tens of thousands, and [n] can be over one hundred. These figures lead
-   to a theoretical upper bound of 100M. In practice, for T=25K and n=108, we
-   observe that the algorithm gathers about 7M facts.) *)
+(* The first symbol of the input, [first fact], defined as [W.first fact.word
+   fact.lookahead], plays a special role. Indeed, for every position, for
+   every first symbol, and for every lookahead symbol, we keep track of at
+   most one fact. Thus, the total number of facts accumulated by the algorithm
+   is at most [T.n^2], where [T] is the total size of the tries that we have
+   constructed, and [n] is the number of terminal symbols. (This number can be
+   quite large. [T] can be in the tens of thousands, and [n] can be over one
+   hundred. These figures lead to a theoretical upper bound of 100M. In
+   practice, for T=25K and n=108, we observe that the algorithm gathers about
+   7M facts.) *)
 
 type fact = {
   position: Trie.trie;
-  word: W.word;
-  lookahead: Terminal.t
+  word_and_lookahead: W.word;
 }
 
 let source fact =
@@ -310,6 +310,20 @@ let source fact =
 let current fact =
   Trie.current fact.position
 
+let lookahead fact =
+  (* The lookahead symbol is the last character in [fact.word_and_lookahead],
+     which is always a nonempty word. *)
+  W.last fact.word_and_lookahead
+
+let first fact =
+  W.first fact.word_and_lookahead
+
+let priority fact =
+  (* The length of [fact.word] serves as the priority of this fact. *)
+  W.length fact.word_and_lookahead - 1
+    (* Subtracting 1 is not really necessary; we could offset all priorities
+       up by one. TEMPORARY try it *)
+
 (* ------------------------------------------------------------------------ *)
 
 module T : sig
@@ -346,8 +360,8 @@ end = struct
       let compare fact1 fact2 =
         let c = Trie.compare fact1.position fact2.position in
         if c <> 0 then c else
-        let a1 = W.first fact1.word fact1.lookahead
-        and a2 = W.first fact2.word fact2.lookahead in
+        let a1 = first fact1
+        and a2 = first fact2 in
         Terminal.compare a1 a2
     end)
 
@@ -361,7 +375,7 @@ end = struct
 
   let register fact =
     let current = current fact in
-    let z = fact.lookahead in
+    let z = lookahead fact in
     let i = index current z in
     let m = table.(i) in
     (* We crucially rely on the fact that [M.add] guarantees not to
@@ -396,7 +410,7 @@ module E : sig
   (* [register s nt w z] records that, in state [s], the outgoing edge labeled
      [nt] can be taken by consuming the word [w], if the next symbol is [z].
      It returns [true] if this information is new. *)
-  val register: Lr1.node -> Nonterminal.t -> W.word -> Terminal.t -> bool
+  val register: Lr1.node -> Nonterminal.t -> W.word -> bool
 
   (* [query s nt a z] answers whether, in state [s], the outgoing edge labeled
      [nt] can be taken by consuming some word [w], under the assumption that
@@ -408,12 +422,12 @@ module E : sig
 
 end = struct
 
-  (* For now, we implement a mapping of [s, nt, a, z] to [w]. *)
+  (* For now, we implement a mapping of [s, nt, a, z] to [wz]. *)
 
   module M =
     MySet.Make(struct
       type t = Nonterminal.t * Terminal.t * Terminal.t * W.word
-      let compare (nt1, a1, z1, _w1) (nt2, a2, z2, _w2) =
+      let compare (nt1, a1, z1, _wz1) (nt2, a2, z2, _wz2) =
         let c = Nonterminal.compare nt1 nt2 in
         if c <> 0 then c else
         let c = Terminal.compare a1 a2 in
@@ -426,11 +440,12 @@ end = struct
 
   let count = ref 0
 
-  let register s nt w z =
+  let register s nt wz =
     let i = Lr1.number s in
     let m = table.(i) in
-    let a = W.first w z in
-    let m' = M.add (nt, a, z, w) m in
+    let a = W.first wz in
+    let z = W.last wz in
+    let m' = M.add (nt, a, z, wz) m in
     m != m' && begin
       incr count;
       table.(i) <- m';
@@ -442,7 +457,7 @@ end = struct
     let m = table.(i) in
     let dummy = W.epsilon in
     match M.find (nt, a, z, dummy) m with
-    | (_, _, _, w) -> f w
+    | (_, _, _, wz) -> f wz
     | exception Not_found -> ()
 
   let verbose () =
@@ -468,7 +483,7 @@ let q =
   Q.create()
 
 (* We never insert into the queue a fact that immediately causes an error,
-   i.e., a fact such that [causes_an_error (current fact) fact.lookahead]
+   i.e., a fact such that [causes_an_error (current fact) (lookahead fact)]
    holds. In practice, this convention allows reducing the number of facts
    that go through the queue by a factor of two. *)
 
@@ -480,9 +495,9 @@ let q =
    significantly. *)
 
 let add fact =
-  (* assert (not (causes_an_error (current fact) fact.lookahead)); *)
+  (* assert (not (causes_an_error (current fact) (lookahead fact))); *)
   (* The length of [fact.word] serves as the priority of this fact. *)
-  Q.add q fact (W.length fact.word)
+  Q.add q fact (priority fact)
 
 let init s =
   match Trie.star s with
@@ -490,8 +505,7 @@ let init s =
       foreach_terminal_not_causing_an_error s (fun z ->
         add {
           position = trie;
-          word = W.epsilon;
-          lookahead = z
+          word_and_lookahead = W.singleton z
         }
       )
   | None ->
@@ -499,22 +513,21 @@ let init s =
 
 (* ------------------------------------------------------------------------ *)
 
-let new_edge s nt w z =
+let new_edge s nt wz =
   (*
   Printf.fprintf stderr "Considering reduction on %s in state %d\n"
     (Terminal.print z) (Lr1.number s);
   *)
-  if E.register s nt w z then
+  let z = W.last wz in
+  if E.register s nt wz then
     let sym = Symbol.N nt in
-    T.query s (W.first w z) (fun fact ->
-      assert (Terminal.equal fact.lookahead (W.first w z));
+    T.query s (W.first wz) (fun fact ->
       match Trie.step sym fact.position with
       | position ->
           if not (causes_an_error (Trie.current position) z) then
             add {
               position;
-              word = W.append fact.word w;
-              lookahead = z
+              word_and_lookahead = W.append1 fact.word_and_lookahead wz
             }
       | exception Not_found ->
           ()
@@ -529,8 +542,8 @@ let new_edge s nt w z =
    and enqueue new facts in the priority queue.
 
    - Sometimes, a fact can also be viewed as a newly discovered edge.
-   This is the case when the word from [fact.source] to [fact.current]
-   represents a production of the grammar and [fact.current] is willing
+   This is the case when the word from [source fact] to [current fact]
+   represents a production of the grammar and [current fact] is willing
    to reduce this production. We record the existence of this edge,
    and re-inspect any previously discovered vertices which are
    interested in this outgoing edge.
@@ -549,16 +562,19 @@ let consequences fact =
     | position, Symbol.T t ->
 
         (* 1a. There is a transition labeled [t] out of [current]. If
-           the lookahead assumption [fact.lookahead] is compatible with [t],
+           the lookahead assumption [lookahead fact] is compatible with [t],
            then we derive a new fact, where one more edge has been taken. We
            enqueue this new fact for later examination. *)
         (**)
 
-        if Terminal.equal fact.lookahead t then
-          let word = W.append fact.word (W.singleton t) in
-          (* assert (Lr1.Node.compare position.Trie.current s' = 0); *)
+        if Terminal.equal (lookahead fact) t then
+          let word_and_lookahead = fact.word_and_lookahead in
+          assert (Lr1.Node.compare (Trie.current position) s' = 0);
           foreach_terminal_not_causing_an_error s' (fun z ->
-            add { position; word; lookahead = z }
+            add {
+              position;
+              word_and_lookahead = W.append word_and_lookahead (W.singleton z)
+            }
           )
 
     | position, Symbol.N nt ->
@@ -568,17 +584,15 @@ let consequences fact =
            word [w] that allows us to take this edge. The answer depends on
            the terminal symbol [z] that comes *after* this word: we try all
            such symbols. Furthermore, we need the first symbol of [w.z] to
-           satisfy the lookahead assumption [fact.lookahead], so the answer
+           satisfy the lookahead assumption [lookahead fact], so the answer
            also depends on this assumption. *)
         (**)
 
         foreach_terminal_not_causing_an_error s' (fun z ->
-          E.query current nt fact.lookahead z (fun w ->
-            assert (Terminal.equal fact.lookahead (W.first w z));
+          E.query current nt (lookahead fact) z (fun wz ->
             add {
               position;
-              word = W.append fact.word w;
-              lookahead = z
+              word_and_lookahead = W.append1 fact.word_and_lookahead wz;
             }
           )
         )
@@ -586,18 +600,19 @@ let consequences fact =
   ) (Lr1.transitions current);
 
   (* 2. View [fact] as a possible edge. This is possible if the path from
-     [fact.source] to [current] represents a production [prod] and
+     [source fact] to [current] represents a production [prod] and
      [current] is willing to reduce this production. We check that
      [fact.position] accepts [epsilon]. This guarantees that reducing [prod]
-     takes us all the way back to [fact.source]. Thus, this production gives
+     takes us all the way back to [source fact]. Thus, this production gives
      rise to an edge labeled [nt] -- the left-hand side of [prod] -- out of
-     [fact.source]. This edge is subject to the lookahead assumption
-     [fact.lookahead], so we record that. *)
+     [source fact]. This edge is subject to the lookahead assumption
+     [lookahead fact], so we record that. *)
   (**)
 
-  match has_reduction current fact.lookahead with
+  let z = lookahead fact in
+  match has_reduction current z with
   | Some prod when Trie.accepts prod fact.position ->
-      new_edge (source fact) (Production.nt prod) fact.word fact.lookahead
+      new_edge (source fact) (Production.nt prod) fact.word_and_lookahead
   | _ ->
       ()
 
@@ -612,9 +627,9 @@ let done_with_level () =
 
 let discover fact =
   if T.register fact then begin
-    if W.length fact.word > ! level then begin
+    if priority fact > !level then begin
       done_with_level();
-      level := W.length fact.word;
+      level := priority fact;
     end;
     consequences fact
   end
@@ -706,7 +721,9 @@ let forward () =
               )
         | Symbol.N nt ->
            foreach_terminal (fun z' ->
-             E.query s nt z z' (fun w ->
+             E.query s nt z z' (fun wz' ->
+               assert (W.last wz' = z');
+               let w = W.chop1 wz' in
                edge w (W.length w) (s', z')
              )
            )
diff --git a/src/grammar.ml b/src/grammar.ml
index 21ef838..01ccabb 100644
--- a/src/grammar.ml
+++ b/src/grammar.ml
@@ -294,11 +294,25 @@ module Terminal = struct
     let length =
       String.length
 
-    let first w z =
-      if length w > 0 then
-        Char.code w.[0]
-      else
-        z
+    let first w =
+      (* This fails with [Invalid_argument "index out of bounds"] if [w] is empty. *)
+      Char.code w.[0]
+
+    let last w =
+      (* This fails with [Invalid_argument "index out of bounds"] if [w] is empty. *)
+      Char.code w.[length w - 1]
+
+    let append1 w1 w2 =
+      assert (last w1 = first w2);
+      let n1 = length w1
+      and n2 = length w2 - 1 in
+      let w = Bytes.create (n1 + n2) in
+      Bytes.blit_string w1 0 w 0 n1;
+      Bytes.blit_string w2 1 w n1 n2;
+      intern (Bytes.unsafe_to_string w)
+
+    let chop1 w =
+      intern (String.sub w 0 (length w - 1))
 
     let rec elements i n w =
       if i = n then
diff --git a/src/grammar.mli b/src/grammar.mli
index 72e2fa1..c9e12d5 100644
--- a/src/grammar.mli
+++ b/src/grammar.mli
@@ -166,8 +166,19 @@ module Terminal : sig
       val singleton: t -> word
       val append: word -> word -> word
       val length: word -> int
-      (* [first w z] returns the first symbol of the word [w.z]. *)
-      val first: word -> t -> t
+      (* [first w] returns the first symbol of the word [w], which must be
+         nonempty. [last w] returns the last symbol of the word [w], which
+         must be nonempty. *)
+      val first: word -> t
+      val last: word -> t
+      (* [append1 w1 w2] requires [w1] and [w2] to be nonempty words, and
+         requires the last symbol of [w1] to coincide with the first symbol
+         of [w2]. It returns the overlapping concatenation of [w1] and [w2],
+         with an overlap of one symbol. *)
+      val append1: word -> word -> word
+      (* [chop1 w] returns [w], deprived of its last symbol. The word [w]
+         must be nonempty. *)
+      val chop1: word -> word
       val elements: word -> t list
       val print: word -> string
       (* [verbose()] prints statistics about the use of the internal
